" Config NeoBundle {{{

if has('vim_starting')
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))
  NeoBundleFetch 'Shougo/neobundle.vim'

if neobundle#exists_not_installed_bundles()
    echomsg 'Not installed bundles : ' .
                \ string(neobundle#get_not_installed_bundle_names())
    echomsg 'Please execute ":NeoBundleInstall" command.'
endif

"}}}

" 日本語help
NeoBundle 'vim-jp/vimdoc-ja'
NeoBundle 'Shougo/neomru.vim'


" {{{ unite.vim
    NeoBundle 'Shougo/unite.vim'
    nnoremap [unite] <Nop>
    nmap <Leader>f [unite]
    nnoremap <silent> [unite]bu :<C-u>Unite buffer<CR>
    nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
    nnoremap <silent> [unite]r :<C-u>Unite register<CR>
    nnoremap <silent> [unite]d :<C-u>UniteWithBufferDir file<CR>
    nnoremap <silent> [unite]ba :<C-u>UniteBookmarkAdd<CR>
    nnoremap <silent> [unite]bo :<C-u>Unite bookmark<CR>

    nnoremap <silent> <buffer> <expr> <C-o> unite#do_action('open')
    inoremap <silent> <buffer> <expr> <C-o> unite#do_action('open')
    " 横分割
    au FileType unite nnoremap <silent> <buffer> <expr> <C-s> unite#do_action('split')
    au FileType unite inoremap <silent> <buffer> <expr> <C-s> unite#do_action('split')
    " 縦分割
    au FileType unite nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
    au FileType unite inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
" }}}
" Config VimFiler {{{

NeoBundle 'Shougo/vimfiler.vim'

" vimデフォルトのエクスプローラをvimfilerで置き換える e. 起動できる
let g:vimfiler_as_default_explorer = 1

" 自動起動
" autocmd VimEnter * VimFiler -split -simple -winwidth=50 -no-quit

"}}}
" Alignta Config {{{
NeoBundle 'h1mesuke/vim-alignta'

"}}}

" Async vim
NeoBundle 'Shougo/vimproc', {
  \ 'build' : {
    \ 'windows' : 'make -f make_mingw32.mak',
    \ 'cygwin'  : 'make -f make_cygwin.mak',
    \ 'mac'     : 'make -f make_mac.mak',
    \ 'unix'    : 'make -f make_unix.mak',
  \ },
\}
" Config NeoSnippet {{{

NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'honza/vim-snippets'

" Plugin key-mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable() <Bar><bar> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable() <Bar><bar> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1
" 独自snippetsのパス
let g:neosnippet#snippets_directory='~/.vim/snippets'


"}}}
" Config NeoComplete / NeoComplcache {{{

" vimのバージョンが 7.4以上ならneocomplete
"                      未満ならneocomplcache

" if v:version >= 704
"    環境問題が面倒なのでShougo/neocompleteは今は使ってない
"    NeoBundle 'Shougo/neocomplete'
" else
    NeoBundle 'Shougo/neocomplcache'
    let g:neocomplcache_enable_at_startup  = 1
    let g:neocomplcache_enable_auto_select = 0
    let g:neocomplcache_enable_smart_case  = 1
    let g:neocomplcache_enable_underbar_completion = 1
    let g:neocomplcache_enable_camel_case_completion = 1
    inoremap <expr><TAB> pumvisible() ? "\<Down>" : "\<TAB>"
    inoremap <expr><S-TAB> pumvisible() ? "\<Up>" : "\<S-TAB>"
    inoremap <expr><C-y> neocomplcache#close_popup()
    inoremap <expr><C-e> neocomplcache#cancel_popup()
    inoremap <expr><CR> neocomplcache#smart_close_popup() . "\<CR>"
    let g:neocomplcache_dictionary_filetype_lists = {
        \ 'default' : '',
        \ 'php'     : $HOME . '/.vim/dict/php.dict',
        \ }

    if !exists('g:neocomplete#text_mode_filetypes')
        let g:neocomplete#text_mode_filetypes = {}
    endif
    let g:neocomplete#text_mode_filetypes = {
                \ 'rst': 1,
                \ 'markdown': 1,
                \ 'gitrebase': 1,
                \ 'gitcommit': 1,
                \ 'vcs-commit': 1,
                \ 'hybrid': 1,
                \ 'text': 1,
                \ 'help': 1,
                \ 'tex': 1,
                \ }
" endif

"}}}

" visual mode
" :B Exコマンド(sortなど)
NeoBundle 'taku-o/vim-vis'

" Config neco-look {{{
NeoBundle 'ujihisa/neco-look'
"}}}
" Config QuickRun {{{
    NeoBundle 'thinca/vim-quickrun'
    let g:quickrun_config = {}
    let g:quickrun_config['_'] = {}
    let g:quickrun_config['_']['runner'] = 'vimproc'
    let g:quickrun_config['_']['runner/vimproc/updatetime'] = 100
    nnoremap <silent> <Space>Q :QuickRun<CR>

"}}}
" webapi-vim {{{
NeoBundle 'mattn/webapi-vim'
" }}}
"excitetranslate {{{
NeoBundle 'mattn/excitetranslate-vim'
" 起動に時間がかかるので注意
nnoremap <silent> etr :<C-u>ExciteTranslate<CR>
" }}}
NeoBundle 'thinca/vim-ref'
" brew install w3m
" tar xzvf php_manual_ja.tar.gz
" mv ~/php-chunked-xhtml ~/.vim/
let g:ref_phpmanual_path = $HOME . '/.vim/phpmanual/'

let g:ref_source_webdict_use_cache = 1
let g:ref_source_webdict_sites = {
            \ 'alc' : {
            \   'url' : 'http://eow.alc.co.jp/%s/UTF-8/'
            \   }
            \ }
" 出力フィルタ 先頭から行を削除している
function! g:ref_source_webdict_sites.alc.filter(output)
      return join(split(a:output, "\n")[25 :], "\n")
endfunction

:cnoremap aa Ref webdict alc<Space>

" 括弧や引用符の編集ができる
" visual mode S"   選択範囲"で囲む
" nolmal mode ds"  "を削除
" nolmal mode cs"' "を'に変換
NeoBundle 'tpope/vim-surround'

" yank to history reuse
NeoBundle 'LeafCage/yankround.vim'
" yank history
let g:yankround_max_history = 35
let g:yankround_dir = '~/.cache/yankround'
nmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap gp <Plug>(yankround-gp)
nmap gP <Plug>(yankround-gP)
" paste after <C-p> yank prev
nmap <C-p> <Plug>(yankround-prev)
" paste after <C-n> yank next
nmap <C-n> <Plug>(yankround-next)
" ctrlp.vim conflict measures
nmap <expr><C-p> yankround#is_active() ? "\<Plug>(yankround-prev)" : "<SID>(ctrlp)"
nnoremap <silent><SID>(ctrlp) :<C-u>CtrlP<CR>
" paste after g<C-p> yank history
nnoremap <silent>g<C-p> :<C-u>CtrlPYankRound<CR>


" CtrlP file search
NeoBundle 'kien/ctrlp.vim'
" Match files Full Screen
let g:ctrlp_max_height = &lines

" {{{Open Browser
    NeoBundle 'tyru/open-browser.vim'
" }}}
" {{{ GitHub Browser
    NeoBundle 'tyru/open-browser-github.vim'
" }}}
" {{{ PreVim    MarkDown Preview
    NeoBundle 'kannokanno/previm'
    " }}}
" MarkDown filetype
augroup PrevimSettings
    autocmd!
    autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
augroup END

" https://github.com/tpope/vim-abolish
NeoBundle 'tpope/vim-abolish'

" % tag jump extension
NeoBundle 'tmhedberg/matchit'
" Uppercase/Lowercase ignore
let b:match_ignorecase = 1

NeoBundle 'alpaca-tc/alpaca_powertabline'
set noshowmode

NeoBundle 'rking/ag.vim'

NeoBundle 'altercation/vim-colors-solarized'
syntax enable
set background=dark
set t_Co=256
" {{{ コンテキストによって filetype を自動的に切り換える
    NeoBundle 'osyo-manga/vim-precious'
    NeoBundle 'Shougo/context_filetype.vim'
" }}}
NeoBundle 'haya14busa/vim-migemo'
" {{{ HEADからの差分を+-で表現してくれる
NeoBundle 'airblade/vim-gitgutter'
" }}}
NeoBundle 'joonty/vdebug'
let g:vdebug_force_ascii = 1

" {{{ vimの起動画面でショートカットを起動できる terryma/vim-multiple-cursors
    NeoBundle 'mhinz/vim-startify'
    " よく使うファイルをブックマースする
    let g:startify_bookmarks = [
      \ $HOME . '/.vimrc',
      \ $HOME . '/.vimrc.neobundle',
      \ $HOME . '/Dropbox/memo/todo.md',
      \ ]
" }}}
" {{{ vimからgitを操作できる tpope/vim-fugitive
    NeoBundle 'tpope/vim-fugitive'
    nnoremap <silent> <Space>gb :Gblame<CR> " git blame
    nnoremap <silent> <Space>gd :Gdiff<CR>  " git diff
    nnoremap <silent> <Space>ga :Gwrite<CR> " git add
    nnoremap <silent> <Space>gs :Gstatus<CR>" git status
    nnoremap <silent> <Space>gi :Gcommit<CR>" git commit gcだとcutがご作動してしまいがちなので、giとする
" }}}
" {{{ editorconfig
    NeoBundle 'editorconfig/editorconfig-vim'
"}}}
" {{{ vim-smartchr
    " = の前後にスペースをいれたりする
    " http://rochefort.hatenablog.com/entry/20101125/p1
    NeoBundle 'kana/vim-smartchr'
    " inoremap <expr> = smartchr#loop(' = ', ' == ', ' === ', '=')
"}}}
" {{{ golangに関するvimの設定 fatih/vim-go
" https://github.com/fatih/vim-go
    NeoBundle 'fatih/vim-go'
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1
    let g:go_fmt_command = 'goimports'
    " 入力補完
    exe "set rtp+=".globpath($GOPATH, "src/github.com/nsf/gocode/vim")
"}}}
" {{{ vim-toggle
    " trueからfalseなど、対となるワードへトグルが出来る
    " normal  = > +
    " insert <C-T>
    NeoBundle 'taku-o/vim-toggle'
    let g:toggle_pairs = {'and' : 'or', 'or' : 'and'}

"}}}
" TComment_Vim Config {{{
    " コメントアウトする
    " <C-_><C-_> visualで選択範囲をコメント
    " <C-_>b     複数行コメント
    " <C-_>p     段落をコメント化
    " <C-_>i     <C-v>と組み合わせて使う
    NeoBundle 'tomtom/tcomment_vim'

"}}}
" EasyMotion Config {{{
    " 検索しやすくなる
    "
    " https://github.com/Lokaltog/vim-easymotion
    NeoBundle 'Lokaltog/vim-easymotion'
    nmap s <Plug>(easymotion-s2)
    nmap t <Plug>(easymotion-t2)
    " Tab:ページアップ
    " S-Tab:ページダウン
    map  g/ <Plug>(easymotion-sn)
    omap g/ <Plug>(easymotion-tn)
    map <Leader>j <Plug>(easymotion-j)
    map <Leader>k <Plug>(easymotion-k)
    " map  n <Plug>(easymotion-next)
    " map  N <Plug>(easymotion-prev)
    " 大文字小文字無視
    let g:EasyMotion_smartcase = 1
    " ダウンロード
    let g:EasyMotion_use_migemo = 1

" }}}
" インデントの可視化 {{{
    " https://github.com/Yggdroot/indentLine
    NeoBundle 'Yggdroot/indentLine'
    " Vim インデントに色を付ける
    let g:indentLine_color_term = 111
    " GVim インデントに色を付ける
    let g:indentLine_color_gui = '#708090'
    " インデント可視化文字
    let g:indentLine_char = '¦'
    set list lcs=tab:\|\ " 設定の末尾にスペース

" }}}
" Indent Guides Config {{{
    NeoBundle 'junegunn/vim-easy-align'
    let g:indent_guides_enable_on_vim_startup = 1

    let g:indent_guides_color_change_percent = 30
    let g:indent_guides_guide_size = 1

"}}}
call neobundle#end()

" colorschemeの設定はここでしか出来ない
colorscheme solarized
" marker {{{1
" vim: foldmethod=marker
" vim: foldcolumn=3
" vim: foldlevel=0
"

